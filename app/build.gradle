apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.5'
    }
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 24
    buildToolsVersion '25.0.0'
    tasks.whenTaskAdded { task ->
        switch (task.name) {
            case "compileDemoDebugSources":
            case "compileDemoReleaseSources":
                task.dependsOn buildDemoApp
                break;
            default:
                if (task.name.matches(~/^compile.+(Debug|Release)Sources$/)) {
                    task.dependsOn buildDevApp
                }
                break
        }
    }
    def String versionNameStr = getVersionName()
    defaultConfig {
        applicationId "org.nem.nac.mainnet"//"org.nem.nac.mainnet3"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName versionNameStr
        multiDexEnabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            versionNameSuffix "-debug"
            signingConfig signingConfigs.config
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    productFlavors {
        dev {
        }
        demo {
        }
    }
    dexOptions {
        jumboMode = true
    }
}

/*
retrolambda {
    jdk System.getenv("JAVA8_HOME")
    oldJdk System.getenv("JAVA7_HOME")
    javaVersion JavaVersion.VERSION_1_7
} */

String java8 = getJavaVersion(8)
String java7 = getJavaVersion(7)

retrolambda {
    jdk java8  //System.getenv("JAVA8_HOME")
    oldJdk java7  //System.getenv("JAVA7_HOME")
    javaVersion JavaVersion.VERSION_1_7

    println("J343 ***************** ---------- *******************")
    println("J343 JAVA8_HOME: " + java8)
    println("J343 JAVA7_HOME: " + java7)
    println("J343 ***************** ---------- *******************")
}

String getJavaVersion(Integer v) {
    def sout = new StringBuffer()
    def proc = "/usr/libexec/java_home -v 1.$v".execute()
    proc.consumeProcessOutput(sout, new StringBuffer())
    proc.waitForOrKill(1000)
    return sout.toString().replace("\n", "").replace("\r", "")
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.annimon:stream:1.0.5'
    compile 'com.jakewharton.timber:timber:4.1.0'
    compile 'com.madgag.spongycastle:prov:1.51.0.0'
    compile 'com.android.support:appcompat-v7:24.2.0'
    compile 'com.android.support:design:24.2.0'
    compile 'com.android.support:support-v4:24.2.0'
    compile 'com.google.zxing:core:3.2.1'
    compile 'nl.qbusict:cupboard:2.1.4'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.4'
    compile 'com.madgag.spongycastle:core:1.51.0.0'
    compile 'commons-codec:commons-codec:1.10'
    compile 'ch.acra:acra:4.9.0'
    compile 'org.mindrot:jbcrypt:0.3m'
}

/**
 * Custom staff
 */
def bumpVersion(def boolean bumpProduction) {
    def PROP_MAJOR = 'version-major',
        PROP_MINOR = 'version-minor',
        PROP_PRODUCTION = 'production-build'
    def File versionFile = file('version.properties');
    if (!versionFile.exists()) {
        if (!versionFile.createNewFile()) {
            throw new IOException("Failed to create version file");
        }
    }

    if (versionFile.canRead()) {
        def Properties props = new Properties();
        props.load(versionFile.newReader("UTF-8"));
        def versionMajor = props.getProperty(PROP_MAJOR, "0").toInteger();
        def versionMinor = props.getProperty(PROP_MINOR, "0").toInteger();
        def versionProduction = props.getProperty(PROP_PRODUCTION, "0").toInteger();
        if (bumpProduction) {
            versionProduction++
        }
        props.setProperty(PROP_MAJOR, versionMajor.toString());
        props.setProperty(PROP_MINOR, versionMinor.toString())
        props.setProperty(PROP_PRODUCTION, versionProduction.toString())
        props.store(versionFile.newWriter("UTF-8"), "Application version information. Managed by Gradle")
    }
}

def String getVersionName() {
    def PROP_MAJOR = 'version-major', PROP_MINOR = 'version-minor', PROP_PRODUCTION = 'production-build'
    def File versionFile = file('version.properties');
    if (!versionFile.exists()) {
        if (!versionFile.createNewFile()) {
            throw new IOException("Failed to create version file!")
        }
    }
    if (versionFile.canRead()) {
        def Properties props = new Properties();
        props.load(versionFile.newReader("UTF-8"));
        def versionMajor = props.getProperty(PROP_MAJOR, "0");
        def versionMinor = props.getProperty(PROP_MINOR, "0");
        def versionProduction = props.getProperty(PROP_PRODUCTION, "0").toInteger();

        return versionMajor + "." + versionMinor + "." + versionProduction + " NEM Wallet+ Mainnet";
    } else {
        throw new IOException("Failed to read version file!");
    }
}

task buildDevApp << {
    bumpVersion(false);
    //setApkName();
}

task buildDemoApp << {
    bumpVersion(false);
    android.defaultConfig.versionName = getVersionName()
    setApkName();
}

def setApkName() {
    android.applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.each { output ->
                output.outputFile = new File(
                        output.outputFile.parent,
                        output.outputFile.name
                                .replace("app-", "NEM-")
                                .replace(".apk", "_v${android.defaultConfig.versionName}.apk"))
            }
        }
    }
}
